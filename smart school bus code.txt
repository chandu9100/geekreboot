//https://thingspeak.com/channels/1010287
#include <LiquidCrystal.h>
LiquidCrystal lcd(2, 3, 4, 5, 6, 7);
#define fire  9

int count = 0;
const char  card1[] = "1E00CB4469F8";
const char  card2[] = "1E007D0CB6D9";

char card_no[15], irq_uc = 0;
char ch = 0;

char read_data = 0, newcard = 0;
int cnt = 0;

char gsm[64], irq_gsm = 0;
char msg[13], mobilenum[11], college[11], mobilenum1[11] = "7981054056", mobilenum2[11] = "8328549182";

void gsm_init(void);
char gsm_clear_msg(char );
void gsm_send_num_mesg1(char *, char *, char *, char *);
void read_msg();

void gps_read();
unsigned char uart1_getch();

unsigned char valid = 0;
unsigned int speed = 0;
char Lg[16], Lt[16];

int speedcap[5];

float flt, flt1;
float flg, flg1;
char s4[11], s5[11];

char wifi_header[110], wifi[64];
int irq_wifi;
char result[5];

char ssid[] = "chandrasekhar";
char psw[] = "123456789";
char api[] = "api.thingspeak.com"; //elegant.orgfree.com
char writeapi[] = "2PSNX97CX6PLUXCI";//UCQFQICK7RHVIQ1D

void EPS8266_Clint_init(void);
void ESP8266_send_to_ThingSpeak(char field1[], char data1[], char field2[], char data2[]);

void read_wifi()
{
  while (Serial.available())
  {
    wifi[irq_wifi++] = Serial.read();
    if (irq_wifi > 62)
      irq_wifi = 63;
  }
}

void clear_wifi()
{
  unsigned int uc;
  for (uc = 0; uc < 64; uc++)
    wifi[uc] = '\0';
}

void clear_wifi_header()
{
  unsigned int uc;
  for (uc = 0; uc < 110; uc++)
    wifi_header[uc] = '\0';
}

void clear_gsm()
{
  unsigned char uc;
  for (uc = 0; uc < 64; uc++)
    gsm[uc] = '\0';
}

void read_gsm(void)
{
  while (Serial1.available())
  {
    gsm[irq_gsm] = Serial1.read();
    irq_gsm++;
    if (irq_gsm > 62)
      irq_gsm = 63;
  }
}
/*--------------------------------------------------------------------*/
/* integer to string conversion */
/* ------------------------------------------------------------------*/
void reverse(char* str, int length)
{
  int i = 0, j = length - 1;
  char tmp;
  while (i < j) {
    tmp = str[i];
    str[i] = str[j];
    str[j] = tmp;
    i++; j--;
  }
}

int INT_TO_STRING(long int n, char* out)
{
  // if negative, need 1 char for the sign
  int sign = n < 0 ? 1 : 0;
  int i = 0;
  if (n == 0) {
    out[i++] = '0';
  } else if (n < 0) {
    out[i++] = '-';
    n = -n;
  }
  while (n > 0) {
    out[i++] = '0' + n % 10;
    n /= 10;
  }
  out[i] = '\0';
  reverse(out + sign, i - sign);
  return 0;
}



/*---------------------------------------------------------------*/
/* float to string convertion   */
/*---------------------------------------------------------------*/
void FLOAT_TO_STRING (float F, char *RESULT, char PRECISION)
{
  long int INTEGER_PART = 0, FLOAT_PART = 0, PRECISION_PART = 1;
  char count = 0, length = 0, BUFFER[10], k = 0;
  for (count = 0; count < PRECISION; count++)
  {
    PRECISION_PART = PRECISION_PART * 10;
  }
  INTEGER_PART = F;
  FLOAT_PART = ((F - INTEGER_PART) * PRECISION_PART );
  INT_TO_STRING(INTEGER_PART, BUFFER);
  for (count = 0; BUFFER[k] != '\0'; count++)
  {
    RESULT[count] = BUFFER[k];
    k++;
  }
  RESULT[count] = '.';
  INT_TO_STRING(FLOAT_PART, BUFFER);
  k = 0; length = count + 1;
  for (count = length; BUFFER[k] != '\0'; count++)
  {
    RESULT[count] = BUFFER[k];
    k++;
  }
  RESULT[count++] = '\0';
}


void setup()
{
  pinMode(fire, INPUT);
  Serial.begin(9600);
  Serial1.begin(9600);
  Serial2.begin(9600);
  Serial3.begin(9600);

  lcd.begin(16, 2);
  lcd.clear();
  lcd.print(F("    WELCOME   ")); delay(1500);


  lcd.clear();          lcd.print(F("SCHOOL BUS TRACK"));
  lcd.setCursor(0, 1);  lcd.print(F("& Security SYS  ")); delay(1500);

  gsm_init();
  gsm_clear_msg(1);
  gsm_clear_msg(2);

  clear_gsm(); irq_gsm = 0;

  lcd.clear(); lcd.print(F("please send msg."));
  lcd.setCursor(0, 1);  lcd.print(F("To store MBL no.")); delay(1500);

  while (1)
  {
    if (Serial1.available())
    {
      delay(300);
      Serial1.print(F("AT+CMGR=1")); irq_gsm = 0;  Serial1.println(); delay(500);

      read_gsm();
      //lcd.clear();
      //lcd.write(gsm[2]);  lcd.write(gsm[3]);   lcd.write(gsm[4]);     lcd.write(gsm[5]);     lcd.write(gsm[6]);

      if (gsm[2] == '+' && gsm[3] == 'C' && gsm[4] == 'M' && gsm[5] == 'T' && gsm[6] == 'I' && gsm[7] == ':')
      {
        lcd.clear(); lcd.setCursor(2, 0); lcd.print(F("I GOT MSG"));   delay(1000);
        read_msg();

        lcd.clear();
        lcd.setCursor(0, 0); lcd.print((String)mobilenum);
        lcd.setCursor(0, 1); lcd.print((String)msg); delay(3000);

        irq_gsm = 0;
        gsm_send_num_mesg1(mobilenum, "Mobile number stored successfully", "", "");
        strcpy(college, msg);
        gsm_send_num_mesg1(college, "College number stored successfully...", "", "");
        lcd.clear();
        break;
      }
      else
      {
        read_gsm(); delay(500); clear_gsm(); irq_gsm = 0;
        lcd.clear();
      }
    }
  }
  lcd.clear(); lcd.print(F("GPS READING..."));
  while (1)
  {
    gps_read();
    if (valid == 1)
    {
      valid == 0;
      break;
    }
  }
  lcd.clear(); lcd.print(F("WIFI INITI...."));
  EPS8266_Clint_init();

}

void loop()
{
  char s1[10], l1 = 1, l3 = 0, p_2 = 0, p_1 = 0;
  unsigned int person1 = 0, person2 = 0, person3 = 0, v_count = 0, delaycount = 0;
  s4[0] = '0';
  s4[1] = '\0';
  s5[0] = '0';
  s5[1] = '\0';

start1:
  while (1)
  {
    gps_read();
    if (Serial3.available())
    {
      count = 0; delay(20);
      while ( (Serial3.available()) && (count < 13))         // Read 12 characters and store them in input array
      {
        card_no[count] = Serial3.read();
        count++;
      }
      card_no[12] = '\0';// Print RFID tag number

      lcd.clear(); lcd.print("Card Detected");

      lcd.setCursor(0, 1); lcd.print(card_no); delay(2000);


      if (!strcmp(card_no, card1))
      {
        person1 = ~ person1;
        if (person1)
        {
          p_1 = 0;
          lcd.clear(); lcd.print(F("STUDENT-1  "));
          lcd.setCursor(0, 1);  lcd.print(F("GETTING INTO VH")); delay(1500);

          v_count++;
          valid = 0;
          gps_read(); delay(200);
          delay(1000);
          ESP8266_send_to_ThingSpeak("&field1=", s4, "&field2=", s5);
          gsm_send_num_mesg1(mobilenum1, (char *)"your son/daughter getting into vehicle at:\n http://google.co.in/maps/place/", "", ""); delay(100);
          gsm_send_num_mesg1(college, (char *)"STUDENT-1 getting into vehicle at:\n http://google.co.in/maps/place/", "", ""); delay(100);
          goto start1;
        }
        else
        {
          p_1 = 1;
          lcd.clear(); lcd.print(F("STUDENT-1  "));
          lcd.setCursor(0, 1);  lcd.print(F("DROPPING FROM VH")); delay(1500);
          valid = 0;
          gps_read(); delay(200);
          delay(1000);
          ESP8266_send_to_ThingSpeak("&field1=", s4, "&field2=", s5);
          gsm_send_num_mesg1(mobilenum1, (char *)"your son/daughter dropping vehicle at:\n http://google.co.in/maps/place/", "", ""); delay(100);
          gsm_send_num_mesg1(college, (char *)"STUDENT-1 dropping vehicle at:\n http://google.co.in/maps/place/", "", ""); delay(100);
          goto start1;
        }
      }
      else if (!strcmp(card_no, card2))
      {
        person2 = ~ person2;
        if (person2)
        {
          p_2 = 0;
          lcd.clear(); lcd.print(F("STUDENT-2  "));
          lcd.setCursor(0, 1);  lcd.print(F("GETTING INTO VH")); delay(1500);
          valid = 0;
          gps_read(); delay(200);
          gsm_send_num_mesg1(mobilenum2, (char *)"your son/daughter getting into vehicle at:\n http://google.co.in/maps/place/", "", ""); delay(100);
          gsm_send_num_mesg1(college, (char *)"STUDENT-2 getting into vehicle at:\n http://google.co.in/maps/place/", "", ""); delay(100);
          delay(1000);
          ESP8266_send_to_ThingSpeak("&field1=", s4, "&field2=", s5);
          goto start1;
        }
        else
        {
          p_2 = 1;
          lcd.clear(); lcd.print(F("STUDENT-2  "));
          lcd.setCursor(0, 1);  lcd.print(F("DROPPING FROM VH")); delay(1500);
          valid = 0;
          gps_read(); delay(200);
          gsm_send_num_mesg1(mobilenum2, (char *)"your son/daughter dropping vehicle at:\n http://google.co.in/maps/place/", "", ""); delay(100);
          gsm_send_num_mesg1(college, (char *)"STUDENT-2 DROPPING FROM vehicle at:\n http://google.co.in/maps/place/", "", ""); delay(100);
          delay(1000);
          ESP8266_send_to_ThingSpeak("&field1=", s4, "&field2=", s5);
          goto start1;
        }
      }
      else;
    }
   if (digitalRead(fire) == HIGH) 
    {
      l3 = 1;
      gsm_send_num_mesg1(mobilenum, (char *)"FIRE ACCIDENT OCCURED TO THE VEHICLE at:\n http://google.co.in/maps/place/", "", ""); delay(100);
      gsm_send_num_mesg1(college, (char *)"FIRE ACCIDENT OCCURED TO THE VEHICLE at:\n http://google.co.in/maps/place/", "", ""); delay(100);
      gsm_send_num_mesg1(mobilenum1, (char *)"FIRE ACCIDENT OCCURED TO THE VEHICLE at:\n http://google.co.in/maps/place/", "", ""); delay(100);
      gsm_send_num_mesg1(mobilenum2, (char *)"FIRE ACCIDENT OCCURED TO THE VEHICLE at:\n http://google.co.in/maps/place/", "", ""); delay(100);
    }
    else
      l3 = 0;
    delay(1000);
    count++;
    if (count > 110)
    {
      count = 0;
      if (p_1 == 0)
      {
        gsm_send_num_mesg1(mobilenum1, (char *)" your son/daughter vehicle at:\n http://google.co.in/maps/place/", "", ""); delay(100);
      }
      if (p_2 == 0)
      {
        gsm_send_num_mesg1(mobilenum2, (char *)" your son/daughter vehicle at:\n http://google.co.in/maps/place/", "", ""); delay(100);
      }
    }
    delaycount++;
    if (delaycount > 3)
    {
      lcd.clear();
      delaycount = 0;
      ESP8266_send_to_ThingSpeak("&field1=", s4, "&field2=", s5);
      goto start1;
    }
  }
}

void EPS8266_Clint_init(void)
{
  unsigned char uc;

  clear_wifi(); irq_wifi = 0; Serial.println("ATE0");  delay(500);  read_wifi();
  clear_wifi(); irq_wifi = 0; Serial.println("ATE0");  delay(500);  read_wifi();

AT:
  clear_wifi(); irq_wifi = 0; Serial.println("AT");  delay(500);
  read_wifi();
  //lcd.clear(); lcd.setCursor(0,0); lcd.print(wifi); delay(2000);
  if (wifi[2] == 'O' && wifi[3] == 'K')
  {
    lcd.clear(); lcd.setCursor(0, 0); lcd.print(F("Modem Connected")); delay(500);
  }
  else
  {
    lcd.clear(); lcd.setCursor(0, 0); lcd.print(F("Modem Not"));
    lcd.setCursor(0, 1); lcd.print(F("   Connected"));   delay(500);
    goto AT;
  }

ATE0:
  clear_wifi(); irq_wifi = 0; Serial.println("ATE0");  delay(1000);
  read_wifi();

  if (wifi[2] == 'O' && wifi[3] == 'K')
  {
    lcd.clear(); lcd.setCursor(0, 0); lcd.print(F("ECHO Canceled")); delay(500);
  }
  else
  {
    lcd.clear(); lcd.setCursor(0, 0); lcd.print(F("ECHO Not"));
    lcd.setCursor(0, 1); lcd.print(F("   Canceled"));  delay(500);
    goto ATE0;
  }

CWMODE:
  clear_wifi(); irq_wifi = 0; Serial.println("AT+CWMODE=3");  delay(800);
  read_wifi();
  if (wifi[2] == 'O' && wifi[3] == 'K')
  {
    lcd.clear(); lcd.setCursor(0, 0); lcd.print(F("S/CLIENT MODE OK"));   delay(800);
  }
  else
  {
    lcd.clear(); lcd.setCursor(0, 0); lcd.print(F("S/CLIENT MODE"));
    lcd.setCursor(0, 1); lcd.print(F("   ERROR"));  delay(800);
    goto CWMODE;
  }

CWJAP:
  lcd.clear(); lcd.setCursor(0, 0); lcd.print(F("Connecting 2 N/W"));
  clear_wifi();
  Serial.print("AT+CWJAP="); Serial.print('"'); Serial.print(ssid); Serial.print('"'); Serial.print(','); Serial.print('"'); Serial.print(psw); Serial.println('"'); irq_wifi = 0; //Serial.println();
  while (Serial.available() == 0);
  delay(5000);
  read_wifi();
  wifi[irq_wifi] = '\0';

  if (strstr(wifi, "WIFI CONNECTED") == NULL)
  {
    lcd.clear(); lcd.setCursor(0, 0); lcd.print(F("WI-FI Not"));
    lcd.setCursor(0, 1); lcd.print(F("    Connected"));  delay(500);
    goto CWJAP;
  }
  else
  {
    lcd.clear(); lcd.setCursor(0, 0); lcd.print(F("WI-FI Connected"));  delay(800);
  }
}
void ESP8266_send_to_ThingSpeak(char field1[], char data1[], char field2[], char data2[])
{
  unsigned int length1;

  lcd.setCursor(0, 1);  lcd.print(F("                "));
  lcd.setCursor(0, 1);  lcd.print(F("SENDING DATA.."));

  clear_wifi_header() ;

  strcpy(wifi_header, "GET /update?key=");
  strcat(wifi_header, writeapi);
  strcat(wifi_header, field1);
  strcat(wifi_header, data1);

  strcat(wifi_header, field2);
  strcat(wifi_header, data2);
  strcat(wifi_header, "\r\n");

  length1 = strlen(wifi_header);
  read_wifi(); clear_wifi(); irq_wifi = 0;

  Serial.print("AT+CIPSTART=\"TCP\",\"");
  Serial.print(api);
  Serial.println("\",80");  delay(2000);  //AT+CIPSTART=\"TCP\",\"elegant.orgfree.com\",80
  read_wifi();

  if (wifi[0] == 'C' && wifi[1] == 'O' && wifi[2] == 'N' && wifi[3] == 'N' && wifi[4] == 'E' &&  wifi[11] == 'O' &&  wifi[12] == 'K')
  {
    lcd.setCursor(0, 1);  lcd.print(F("                "));
    lcd.setCursor(0, 1);  lcd.print(F("SERVER CONNECTED"));  delay(800);

    read_wifi(); clear_wifi(); irq_wifi = 0;
    Serial.print("AT+CIPSEND="); Serial.println(length1);  delay(500);
    read_wifi();

    if (wifi[0] == 13 && wifi[1] == 10 && wifi[2] == 'O' && wifi[3] == 'K' && wifi[6] == '>')
    {
      lcd.setCursor(0, 1);  lcd.print(F("                "));
      lcd.setCursor(0, 1);  lcd.print(F("Pushing Data...."));   delay(100);

      read_wifi(); clear_wifi(); irq_wifi = 0; Serial.print(wifi_header);  delay(2500);
      read_wifi();
      if (strstr(wifi, "SEND OK") != NULL)
      {
        lcd.setCursor(0, 1);  lcd.print(F("                "));
        lcd.setCursor(0, 1);  lcd.print(F("SEND OK"));   delay(800);
      }
      else
      {
        lcd.setCursor(0, 1);  lcd.print(F("                "));
        lcd.setCursor(0, 1);  lcd.print(F("SEND NOT OK"));   delay(800);
      }

      read_wifi(); clear_wifi(); irq_wifi = 0;
    }
  }
}
void gsm_init(void)
{
  unsigned int ui_t1;
  char E_count = 0;

gsminit:
  clear_gsm();
  lcd.clear(); lcd.print(F("GSM INIT..."));
  Serial1.print(F("ATE0")); irq_gsm = 0; Serial1.println(); delay(500);

  read_gsm(); clear_gsm(); E_count = 0;
AT:
  delay(100);
  Serial1.print(F("AT")); irq_gsm = 0; Serial1.println(); delay(500);
  read_gsm();

  if (gsm[2] == 'O' && gsm[3] == 'K')
  {
    lcd.clear(); lcd.print(F("AT :  OK"));    delay(500);
  }
  else
  {
    E_count++;
    lcd.clear(); lcd.print(F(" GSM Not"));
    lcd.setCursor(0, 1); lcd.print(F("     Conected"));    delay(500);
    if (E_count > 9)
    {
      E_count = 0;
      goto gsminit;
    }
    goto AT;
  }
  clear_gsm(); E_count = 0;
  Serial1.print(F("ATE0")); irq_gsm = 0; Serial1.println(); delay(500);

  read_gsm(); clear_gsm(); E_count = 0;
ATE0:
  Serial1.print(F("ATE0")); irq_gsm = 0; Serial1.println(); delay(500);
  read_gsm();
  if (gsm[2] == 'O' && gsm[3] == 'K')
  {
    lcd.clear(); lcd.print(F("ATE0 :  OK"));  delay(500);
  }
  else
  {
    E_count++;
    lcd.clear(); lcd.print(F(" GSM Not"));
    lcd.setCursor(0, 1); lcd.print(F("   Connected"));     delay(500);
    if (E_count > 9)
    {
      E_count = 0;
      goto gsminit;
    }
    goto ATE0;
  }

  clear_gsm(); E_count = 0;
ATCPIN:
  Serial1.print(F("AT+CPIN?"));  Serial1.println();  irq_gsm = 0;  delay(500);
  read_gsm();

  if (gsm[2] == '+' && gsm[3] == 'C' && gsm[4] == 'P' && gsm[5] == 'I' && gsm[6] == 'N' && gsm[7] == ':' && gsm[8] == ' ' && gsm[9] == 'R')
  {
    lcd.clear(); lcd.print(F(" SIM "));
    lcd.setCursor(0, 1); lcd.print(F("    CONNECTED")); delay(800);
  }
  else
  {
    E_count++;
    lcd.clear();  lcd.print(F("SIM CHECKING "));
    lcd.setCursor(0, 1);  lcd.print(F("     PLEASE WAIT"));  delay(800);
    if (E_count > 20)
    {
      E_count = 0;
      goto gsminit;
    }
    goto ATCPIN;
  }

  clear_gsm(); E_count = 0;
ATCREG:
  Serial1.print(F("AT+CREG?")); Serial1.println();   irq_gsm = 0; delay(500);
  read_gsm();

  if (gsm[11] == '0')
  {
    E_count++;
    lcd.clear(); lcd.print(F(" Not Registered"));
    lcd.setCursor(0, 1); lcd.print(F("MT NOT searching"));   delay(800);
    if (E_count > 9)
    {
      E_count = 0;
      goto gsminit;
    }
    goto ATCREG;
  }
  else if (gsm[11] == '1')
  {
    lcd.clear(); lcd.print(F("     SIM "));
    lcd.setCursor(0, 1); lcd.print(F("Registered H N/W"));   delay(800);
  }
  else if (gsm[11] == '2')
  {
    E_count++;
    lcd.clear(); lcd.print(F(" Not Registered"));
    lcd.setCursor(0, 1); lcd.print(F("MT searching NW"));  delay(800);
    if (E_count > 20)
    {
      E_count = 0;
      goto gsminit;
    }
    goto ATCREG;
  }
  else if (gsm[11] == '3')
  {
    E_count++;
    lcd.clear(); lcd.print(F(" Registration"));
    lcd.setCursor(0, 1); lcd.print(F("   Denied "));   delay(800);
    if (E_count > 20)
    {
      E_count = 0;
      goto gsminit;
    }
    goto ATCREG;
  }
  else if (gsm[11] == '4')
  {
    E_count++;
    lcd.clear(); lcd.print(F(" UNKNOWN "));    delay(800);
    if (E_count > 9)
    {
      E_count = 0;
      goto gsminit;
    }
    goto ATCREG;
  }
  else if (gsm[11] == '5')
  {
    lcd.clear(); lcd.print(F(" Registered"));
    lcd.setCursor(0, 1); lcd.print(F("       Roaming"));   (1000);
  }
  else
  {
    E_count++;
    if (E_count > 20)
    {
      E_count = 0;
      goto gsminit;
    }
    goto ATCREG;
  }
  clear_gsm(); E_count = 0;
ATCMGF:
  Serial1.print(F("AT+CMGF=1")); irq_gsm = 0;  Serial1.println(); delay(500);
  clear_gsm(); E_count = 0;
ATCNMI:
  Serial1.print(F("AT+CNMI=2,1")); irq_gsm = 0; Serial1.println(); delay(500);
  read_gsm();
  if (gsm[2] == 'O' && gsm[3] == 'K')
  {
    lcd.clear(); lcd.print(F("SMS Settings OK"));  delay(1000);
  }
  else
  {
    E_count++;
    lcd.clear(); lcd.print(F("SMS Settings "));
    lcd.setCursor(0, 1); lcd.print(F("  NOT  OK   "));    delay(1000);
    if (E_count > 20)
    {
      E_count = 0;
      goto gsminit;
    }
    goto ATCNMI;
  }
  clear_gsm(); E_count = 0;
ATW:
  Serial1.print(F("AT&W")); irq_gsm = 0; Serial1.println();  delay(500);
}
char gsm_clear_msg(char num)
{
  char E_count = 0;

  clear_gsm(); E_count = 0;
ATCMGD:
  Serial1.print(F("AT+CMGD=")); Serial1.print(num, DEC);     irq_gsm = 0;  Serial1.println(); delay(500);
  read_gsm();

  if (gsm[2] == 'O' && gsm[3] == 'K')
  {
    lcd.clear(); lcd.print(F(" MSG DELETED"));  delay(800);
  }
  else
  {
    E_count++;
    lcd.clear(); lcd.print(F("MSG DELETE ERROR"));  delay(800);
    if (E_count > 50)
    {
      E_count = 0;
      return (0);
    }
    goto ATCMGD;
  }
  return (1);
}

void gsm_send_num_mesg1(char *num, char *msg1, char *msg2, char *msg3)
{
  lcd.clear();  lcd.print(F("MSG SENDING..."));
  lcd.setCursor(0, 1); lcd.print((String )num); delay(500);
  Serial1.print(F("AT+CMGS=")); Serial1.print('"');  Serial1.print((String)num);
  Serial1.print('"');  Serial1.println("");  delay(1000);
  Serial1.print((String)msg1);
  Serial1.print((String)msg2);
  Serial1.print((String)msg3);
  Serial1.print(s4); Serial1.print(','); Serial1.print(s5);
  Serial1.print("  ");   delay(500);
  Serial1.write(0x1A); delay(500);
  read_gsm();
  while (!Serial1.available());
  delay(3000);
  irq_gsm = 0; clear_gsm();
  read_gsm();

  lcd.clear();
  //lcd.print(gsm); delay(3000);
  if (gsm[2] == '+' && gsm[3] == 'C')
  {
    lcd.print(F(" MSG SENT "));
    lcd.setCursor(0, 1); lcd.print(F("    Successfully"));
  }
  else
  {
    lcd.print(F(" MSG Sending "));
    lcd.setCursor(0, 1); lcd.print(F("Error"));
  }
  Serial1.println(); delay(2000);

}
void read_msg()
{
  unsigned char a, b, i, count, numcnt, j;

  while (Serial1.available())
  {
    j = !Serial1.available();
    delay(100);
  }

  Serial1.print(F("AT+CMGR=1"));
  Serial1.println();

  count = 0;
  i = 0;
  a = 0;
  numcnt = 0;

  while (count != 3)
  {
    while (!Serial1.available());
    b = Serial1.read();;
    //Serial1.println(b);

    if ((b == ',') || (a == 1))
    {
      if (numcnt < 15)
      {
        if (numcnt > 4)
        {
          mobilenum[numcnt - 5] = b;
        }
        a = 1;
        numcnt++;
      }
      else
        a = 0;
    }
    if (count == 2)
    {
      msg[i] = b;
      i++;
    }
    j = 0;
    if (b == 10)
      count += 1;
  }
  msg[--i] = '\0';
  msg[--i] = '\0';
  mobilenum[10] = '\0';
  Serial1.print(F("AT+CMGD=1"));
  Serial1.println(); delay(500);
}
unsigned char  uart1_getch()
{
  unsigned char c;
  while (1)
  {
    if (Serial2.available()) { // check for gps data
      c =  Serial2.read();
      break;
    }
  }
  return c;
}
void gps_read()
{

  unsigned char gpsdata, i, k, GPSvalue[52];

  while (1)
  {
    gpsdata = uart1_getch();
    if (gpsdata == '$')
    {
      gpsdata = uart1_getch();
      gpsdata = uart1_getch();

      if (uart1_getch() == 'R')
      {
        if (uart1_getch() == 'M')
        {
          if (uart1_getch() == 'C')
          {
            i = 0;
            while (i < 52)
            {
              GPSvalue[i] = uart1_getch();
              i++;
            }
            GPSvalue[i] = '\0';

            lcd.clear();
            //lcd.print("LT"); lcd.write(GPSvalue[11]); lcd.write(GPSvalue[12]);

            k = 0;

            for (i = 13; i < 25; i++)
            {
              //lcd.write(GPSvalue[i]);
              Lt[k] = GPSvalue[i]; k++;
            }

            Lt[k] = '\0';
            //lcd.setCursor(0, 1);           lcd.print("LG:");
            k = 0;

            for (i = 26; i < 39; i++)
            {
              //lcd.write(GPSvalue[i]);
              Lg[k] = GPSvalue[i]; k++;
            }
            delay(1500);
            Lg[k] = '\0';

            if (GPSvalue[11] == 'A')
            {
              valid = 1;
              //int a=0;
              flt = (Lt[2] - 48) * 10 + (Lt[3] - 48) * 1;
              /*flt=0;
              while(Lt[a]!=".")
              {
                flt= flt*10 + (Lt[a]-48);
                a++;
              }
              flt1=0;
              float c=1;
              while(Lt[a]!="\0")
              {
                flt1= flt1*10 + (Lt[a]-48);
                a++;
                c*=10
              }*/
              char s6[7],s7[7];
              s6[0]='\0';
              flt1 = (Lt[5] - 48) * 1000 + (Lt[6] - 48) * 100 + (Lt[7] - 48) * 10 + (Lt[8] - 48) * 1;
              flt1 = (flt1 / 10000);

              flt = (flt + flt1);

              flt = flt / 60;
              s4[0]=Lt[0];
              s4[1]=Lt[1];
              s4[2]='.';
              long int a=flt*1000000;
              if(a<100000)
              {
                s4[3]='0';
                INT_TO_STRING(a,s6);
                s4[4]=s6[0];
                s4[5]=s6[1];
                s4[6]=s6[2];
                s4[7]=s6[3];
                s4[8]=s6[4];
              }
              else
              {
                
                INT_TO_STRING(a,s6);
                s4[3]=s6[0];
                s4[4]=s6[1];
                s4[5]=s6[2];
                s4[6]=s6[3];
                s4[7]=s6[4];
                s4[8]=s6[5];
              }
             // flt1 = (Lt[0] - 48) * 10 + (Lt[1] - 48) * 1;
             // flt = (flt1 + flt);
              
             // lcd.setCursor(0, 0); lcd.print(s4);
              
             /* flg=0;
              while(Lg[a]!=".")
              {
                flg= flg*10 + (Lg[a]-48);
                a++;
              }
              flg1=0;
              c=1;
              while(Lg[a]!="\0")
              {
                flg1= flg1*10 + (Lg[a]-48);
                a++;
                c*=10
              }*/
              flg = (Lg[3] - 48) * 10 + (Lg[4] - 48) * 1;
              flg1 = (Lg[6] - 48) * 1000 + (Lg[7] - 48) * 100 + (Lg[8] - 48) * 10 + (Lg[9] - 48) * 1;
              flg1 = (flg1 /10000);
              flg = flg + flg1;
              flg = flg / 60;
              s5[0]=Lg[1];
              s5[1]=Lg[2];
              s5[2]='.';
              //s7+=flg;
              
              //flg1 = (Lg[0] - 48) * 100 + (Lg[1] - 48) * 10 + (Lg[2] - 48) * 1;
              //flg = flg1 + flg;
              a=0;
              long int b=flg*1000000;
              if(b<100000)
              {
                s5[3]='0';
                INT_TO_STRING(b,s7);
                s5[4]=s7[0];
                s5[5]=s7[1];
                s5[6]=s7[2];
                s5[7]=s7[3];
                s5[8]=s7[4];
              }
              else
              {
                
                INT_TO_STRING(b,s7);
                s5[3]=s7[0];
                s5[4]=s7[1];
                s5[5]=s7[2];
                s5[6]=s7[3];
                s5[7]=s7[4];
                s5[8]=s7[5];
              }
              
              //lcd.setCursor(0, 1); lcd.print(s); delay(2000);
              /*
              lcd.clear();
              FLOAT_TO_STRING(flt, s4, 6);*/
             lcd.setCursor(0, 0); lcd.print(s4);

             // FLOAT_TO_STRING(flg, s5, 6);
             lcd.setCursor(0, 1); lcd.print(s5); delay(2000);
            //new code
            /*  lcd.setCursor(0, 0); lcd.print(F("pls insert card"));
              delay(2000);
              lcd.setCursor(0, 0); lcd.print(F("reading card..."));
              delay(2000);
              lcd.setCursor(0, 0); lcd.print(F("enter password"));
              delay(2000);
              lcd.setCursor(0, 0); lcd.print(F("pls remove card"));
              delay(2000);
              lcd.setCursor(0, 0); lcd.print(F("select bank account"));
              delay(2000);
              lcd.setCursor(0, 0); lcd.print(F("enter otp"));
              delay(2000);
              lcd.setCursor(0, 0); lcd.print(F("pswd not match"));
              delay(1000);
              lcd.setCursor(0, 0); lcd.print(F("pls try again"));
              delay(1000);
              //till here*/
            }
            else
            {
              valid = 0;
              lcd.clear(); lcd.print("INVALID GPS VALU");
            }
            delay(2000);
            break;
          }
        }
      }
    }
  }
}